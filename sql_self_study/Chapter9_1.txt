SELECT *, product_id FROM product; -- 애스터리스크는 꼭 앞에 와야

a <=> b 는 NULL 대응하는 a와 b는 같다 의미
<=> 이외의 연산자로 NULL을 비교대상으로 할 경우 결과는 모두 NULL을 반환
NOT NULL도 NULL 반환
= 연산자는 TRUE를 1로, FALSE를 0으로 변환하여 비교대상으로
IS의 경우 0만 FALSE로 판정하고, 그 밖의 수치는 모두 TRUE로 판정

SELECT customer_id FROM customer WHERE customer_name IS NULL;

문자열에서 비교 연산자를 사용하면 대소문자 구별 x, 끝의 공백은 무시 → BINARY 이용
SELECT * FROM search WHERE val = BINARY 'A';

LIKE를 사용하면 문자열 끝에 붙은 공백이 무시되지 않음
SELECT * FROM searh WHERE val LIKE 'A';

LIKE는 문자열 일부만 일치하는지 여부 판정 가능. 이스케이프 처리는 \로 진행
SELECT * FROM product WHERE product_name LIKE '약용%';

SELECT * FROM customer WHERE NOT (membertype_id = 1);

연산자 우선순위 : BINARY > 산술 연산자 > 비교 연산자 > BETWEEN, CASE, WHEN, THEN > NOT > AND, XOR, OR
괄호를 붙여 먼저 연산 시행 가능

집계함수를 적을 수 있는 곳은 SELECT 구, HAVING 구, ORDER BY 구 이렇게 3개
그룹화를 시행했을 때 SELECT 구, HAVING 구에 지정할 수 있는 것은 상수, 집계함수, 집계키의 컬럼명

정렬키에는 연산자, 함수 등도 사용 가능 SELECT 구에 없는 것도 지정 가능
SELECT product_name, stock, price FROM product ORDER BY stock * price;

SELECT * FROM product ORDER BY price IS NULL ASC, price ASC; -- NULL이면 1이 되므로 마지막으로 배치

SELECT
customer, quantity,
CASE
WHEN quantity <= 3 THEN 1000
WHEN quantity <= 7 THEN 1200
WHEN quantity <= 10 THEN 1500
ELSE 2000
END AS delivery_fee
FROM delivery;

SELECT
customer,
CASE delivery_time
WHEN 1 THEN '오전'
WHEN 2 THEN '오후'
WHEN 3 THEN '야간'
ELSE '지정 없음'
END AS delivery_time2
FROM delivery;

SELECT AVG(COALESCE(star, 0)) FROM inquiry; -- star 컬럼의 NULL값을 0으로 변환
SELECT * FROM product ORDER BY IFNULL(price, 999999) ASC; -- price 컬럼의 NULL 값을 999999로 변환
SE:ECT AVG(NULLIF(star, 0)) FROM inquiry; -- star 컬럼의 0 값을 NULL로 변환

CAST 함수의 변환하는 데이터형 : CHAR, DATE, DATETIME, TIME, DECEMAL(a, b), SIGNED, UNSIGNED 등
SELECT * FROM ranking ORDER BY CAST(rank_value AS SIGNED);

Sub Query에서 ALL과 ANY는 모든 비교 연산자를 지정할 수 있는 것이 특징
SELECT * FROM product
WHERE stock < ANY(
    SELECT SUM(quantity) FROM productorder GROUP BY product_id
);

복수행 Sub Query 결과 등 일시적인 테이블에는 AS(Alias)로 별명을 붙여줘야

상관 Sub Query : Main Query 안에서 1 레코드씩 Sub Query를 실행
SELECT product.product_id, product.product_name
FROM product AS p
WHERE 3 < (
    SELECT SUM(quantity) FROM productorder AS po WHERE p.product_id = po.product_id
);

SELECT p.product_id, p.product_name FROM product AS p
WHERE
EXISTS (
    SELECT * FROM productorder AS po WHERE p.product_id = po.product_id
);

UNION은 중복을 허락하지 않음 → 중복을 허용하려면 UNION ALL 활용해야
(SELECT * FROM inquiry) UNION (SELECT * FROM inquiry_2019);
(SELECT * FROM inquiry) UNION ALL (SELECT * FROM inquiry_2019);

SELECT c.customer_id, c.customer_name, po.order_id, po.price
FROM customer AS c
LEFT JOIN productorder AS po
ON c.customer_id = po.customer_id AND po.price >= 500
ORDER BY c.customer_id;