DROP PROCEDURE IF EXISTS user_proc; -- DROP PROCEDURE에는 괄호가 붙지 않아야
DELIMITER //
CREATE PROCEDURE user_proc()
BEGIN
SELECT * FROM member;
END //
DELIMITER ;
CALL user_proc();

DELIMITER //
CREATE PROCEDURE user_proc(IN userName VARCHAR(10))
BEGIN
SELECT * FROM member WHERE mem_name = userName;
END //
DELIMITER ;
CALL user_proc('에이핑크');

DELIMITER //
CREATE PROCEDURE user_proc(IN txtValue CHAR(10), OUT outValue INT)
BEGIN
INSERT INTO noTable VALUES (NULL, txtValue);
SELECT MAX(id) INTO outValue FROM noTable;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE user_proc(IN tableName VARCHAR(20))
BEGIN
SET @sqlQuery = CONCAT('SELECT * FROM ', tableName);
PREPARE myQuery FROM @sqlQuery;
EXECUTE myQuery; -- 동적 SQL은 USING 예약어 활용 가능
DEALLOCATE PREPARE myQuery;
END //
DELIMITER ;
CALL user_proc('member');

YEAR(), MONTH(), DAY(), CURDATE(), DATEDIFF() 등

SET GLOBAL log_bin_trust_function_creators = 1; -- stored function 생성 권한 허용

DELIMITER //
CREATE FUNCTION func(dYear INT)
RETURNS INT
BEGIN
DECLARE runYear INT;
SET runYear = YEAR(CURDATE()) - dYear;
RETURN runYear;
END //
DELIMITER ;

SELECT mem_id, mem_name, func(YEAR(debut_date)) '활동 햇수' FROM member;

DELIMITER //
CREATE PROCEDURE cursor_proc()
BEGIN
DECLARE memNumber INT;
DECLARE cnt INT DEFAULT 0;
DECLARE totNumber INT DEFAULT 0;
DECLARE endOfRow BOOLEAN DEFAULT FALSE;
DECLARE memberCursor CURSOR
FOR SELECT mem_number FROM member;
DECLARE CONTINUE HANDLER
FOR NOT FOUND SET endOfRow = TRUE;
OPEN memberCursor;
cursor_loop: LOOP
FETCH memberCursor INTO memNumber;
IF endOfRow THEN
LEAVE cursor_loop;
END IF;
SET cnt = cnt + 1;
SET totNumber = totNumber + memNumber;
END LOOP cursor_loop;
SELECT (totNumber/cnt) '평균 인원';
CLOSE memberCursor;
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER myTrigger
AFTER DELETE ON trigger_table
FOR EACH ROW
BEGIN
SET @msg = '가수 그룹 삭제';
END //
DELIMITER ;

CREATE TABLE singer (SELECT mem_id, mem_name, mem_number, addr FROM member);
ALTER TABLE singer
ADD PRIMARY KEY (mem_id);
CREATE TABLE backup
(mem_id CHAR(8) NOT NULL,
mem_name VARCHAR(10) NOT NULL,
mem_number INT NOT NULL,
addr CHAR(2) NOT NULL,
modType CHAR(2),
modDate DATE,
modUser VARCHAR(30)
);

DROP TRIGGER IF EXISTS singer_updateTrg;
DELIMITER //
CREATE TRIGGER singer_updateTrg
AFTER UPDATE ON singer FOR EACH ROW
BEGIN
INSERT INTO backup VALUES (OLD.mem_id, OLD.mem_name, OLD.mem_number, OLD.addr, '수정', CURDATE(), CURRENT_USER());
END //
DELIMITER ;

DROP TRIGGER IF EXISTS singer_deleteTrg;
DELIMITER //
CREATE TRIGGER singer_deleteTrg
AFTER DELETE ON singer FOR EACH ROW
BEGIN
INSERT INTO backup_singer VALUES (OLD.mem_id, OLD.mem_name, OLD.mem_number, OLD.addr, '삭제', CURDATE(), CURRENT_USER());
END //
DELIMITER ;